# VaR是一定期间内置信区间下的最大损失。CVaR是一定期间内超过VaR时的期望损失

1. 历史法计算VaR               # 用MCS模拟股价终值，从最差的收益率里计算VaR

import numpy as np
import scipy.stats as scs
import matplotlib.pyplot as plt

S0 = 100
r = 0.05
sigma = 0.25
lamb = 0.75
mu = -0.4
delta = 0.25
T = 30 / 365.    #计算一个月的VaR
I = 10000
dt = T / M

#下面用Jump difussion Model计算股价

rj = lamb * (np.exp(mu + 0.5 * delta ** 2) - 1)
S = np.zeros((M + 1, I))
S[0] = S0
sn1 = np.random.standard_normal((M + 1, I))
sn2 = np.random.standard_normal((M + 1, I))
poi = np.random.poisson(lamb * dt, (M + 1, I))
for t in range(1, M + 1, 1):
    S[t] = S[t - 1] * (np.exp((r - rj - 0.5 * sigma ** 2) * dt
                       + sigma * np.sqrt(dt) * sn1[t])
                       + (np.exp(mu + delta * sn2[t]) - 1)
                       * poi[t])
    S[t] = np.maximum(S[t], 0)

#下面计算VaR

R_jd = np.sort(S[-1] - S0)
percs = [0.01, 0.1, 1., 2.5, 5.0, 10.0]
var = scs.scoreatpercentile(R_jd, percs)


#下面打印计算结果

print('%16s %16s' % ('Confidence Level', 'Value-at-Risk'))
print(33 * '-')
for pair in zip(percs, var):
    print('%16.2f %16.3f' % (100 - pair[0], -pair[1]))
    
#下面画图

plt.figure(figsize=(10, 6))
plt.plot(percs, jd_var, 'r', lw=1.5, label='JD')
plt.legend(loc=4)
plt.xlabel('100 - confidence level [%]')
plt.ylabel('value-at-risk')
plt.ylim(ymax=0.0);
# plt.savefig('../../images/ch12/stoch_20.png');



2. 模型法计算VaR和CVaR  

#假设收益率服从正态分布

import numpy as np
import scipy.stats as scs

T = 5             #CVaR的计算期限
mu = 0.06         #T时间里的收益率均值
mu_T = T * mu / 252      
sigma = 0.41      #收益率的年化波动率
sigma_T = sigma * np.sqrt(T/252)       #T 时期的收益率波动率      
alpha = 0.01            #显著性水平
lev = 100*(1-alpha)       #置信区间
 
CVaR_T = alpha**-1 * scs.norm.pdf(scs.norm.ppf(alpha))*sigma_T - mu_T
VaR_T = scs.norm.ppf(1-alpha)*sigma_T - mu_T
 
print("%g%% %g-day Normal CVaR   = %.2f%%" % (lev, T, CVaR_T *100))
print("%g%% %g-day Normal VaR    = %.2f%%" % (lev, T, VaR_T*100))
